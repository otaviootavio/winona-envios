// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    orderImports  OrderImport[]
    correiosCredential CorreiosCredential?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Existing models remain unchanged...
// TODO 
// IS IT REALLY NECESSARY?
// New models for order management
model OrderImport {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String   // e.g., 'processing', 'completed', 'failed'
    fileName  String
    
    // Relationship with User who imported
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    
    // Relationship with Orders
    orders    Order[]
}

model Order {
    id                String      @id @default(cuid())
    orderNumber      String      // original order number from the shop
    shippingStatus OrderStatus @default(UNKNOWN)
    trackingCode     String?     // tracking code if available
    
    // Import batch reference
    orderImport     OrderImport @relation(fields: [orderImportId], references: [id])
    orderImportId   String

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([orderNumber])
    @@index([trackingCode])
}


enum OrderStatus {
  UNKNOWN     @map("DESCONHECIDO")  // Initial state
  POSTED      @map("POSTADO")       // Found in Correios
  NOT_FOUND   @map("NAO_ENCONTRADO") // Not found in Correios
  IN_TRANSIT  @map("EM_TRANSITO")   // When tracking shows movement
  DELIVERED   @map("ENTREGUE")      // When tracking shows delivery
}

model CorreiosCredential {
    id            String   @id @default(cuid())
    identifier    String   // CNPJ or CPF
    accessCode    String   // Encrypted access code
    contract      String   // Contract number
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    
    // Relationship with User
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @unique // One-to-one relationship with User

    @@index([identifier])
}
